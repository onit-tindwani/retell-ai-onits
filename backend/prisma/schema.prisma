// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  auth0Id       String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  settings      UserSettings?
  subscription  Subscription?
  calls         Call[]
  recordings    Recording[]
  payments      Payment[]
  analytics     Analytics[]
  bulkCalls     BulkCall[]
}

model UserSettings {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  language          String   @default("en")
  timezone          String   @default("UTC")
  notificationEmail String?
  notificationPhone String?
  aiPersonality     String   @default("professional")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Subscription {
  id                  String   @id @default(uuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeId            String   @unique
  status              String
  plan                String
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Call {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumber String
  status      String
  duration    Int?
  transcript  String?
  recording   Recording?
  analytics   Analytics?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Recording {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  callId    String   @unique
  call      Call     @relation(fields: [callId], references: [id], onDelete: Cascade)
  url       String
  duration  Int
  format    String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeId  String   @unique
  amount    Int
  currency  String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Analytics {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  callId        String   @unique
  call          Call     @relation(fields: [callId], references: [id], onDelete: Cascade)
  sentiment     String?
  topics        String[]
  keywords      String[]
  summary       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model BulkCall {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      String
  totalCalls  Int
  completed   Int      @default(0)
  failed      Int      @default(0)
  template    String?
  phoneNumbers String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
} 